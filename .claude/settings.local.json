{
  "permissions": {
    "allow": [
      "Bash(rm:*)",
      "Bash(npm install)",
      "Bash(npm run dev:backend:*)",
      "Bash(npm run dev:client:desktop:renderer:*)",
      "Bash(npm install:*)",
      "Bash(npm run migrate:backend:*)",
      "Bash(npm rebuild:*)",
      "Bash(pkill:*)",
      "Bash(true)",
      "Bash(sqlite3:*)",
      "Bash(node:*)",
      "Bash(npm uninstall:*)",
      "Bash(npx knex migrate:make:*)",
      "Bash(ls:*)",
      "Bash(npm run start:*)",
      "Bash(timeout:*)",
      "Bash(npm run:*)",
      "Bash(npx knex migrate:status:*)",
      "Bash(mv:*)",
      "Bash(npm start)",
      "Bash(curl:*)",
      "Bash(grep:*)",
      "Bash(rg:*)",
      "Bash(jq:*)",
      "Bash(npx knex migrate:rollback:*)",
      "Bash(npx knex migrate:latest:*)",
      "Bash(npx knex migrate:up:*)",
      "Bash(time node:*)",
      "Bash(find:*)",
      "WebFetch(domain:ai.google.dev)",
      "Bash(mkdir:*)",
      "Bash(git rm:*)",
      "Bash(git add:*)",
      "Bash(python3:*)",
      "Bash(cat:*)",
      "Bash(npx knex raw:*)",
      "Bash(fuser:*)",
      "Bash(ss:*)",
      "Bash(git commit:*)",
      "Bash(git restore:*)",
      "Bash(pgrep:*)",
      "Bash(cp:*)",
      "Bash(source .env)",
      "Bash(source:*)",
      "Bash(if [ -f .env ])",
      "Bash(then)",
      "Bash(if grep -q \"HIERO_OPERATOR_ID\" .env)",
      "Bash(else)",
      "Bash(fi)",
      "Bash(if grep -q \"HIERO_OPERATOR_KEY\" .env)",
      "Bash(if grep -q \"HIERO_TOPIC_ID\" .env)",
      "Bash(sed:*)",
      "Bash(chmod:*)",
      "Bash(npx knex:*)",
      "Bash(npm search:*)",
      "Bash(tree:*)",
      "Bash(touch:*)",
      "Bash(command -v:*)",
      "Bash(/dev/null)",
      "Bash(git push:*)",
      "Bash(git fetch:*)",
      "Bash(electron:*)",
      "Bash(npx electron:*)",
      "Bash(git pull:*)",
      "Bash(bash:*)",
      "Bash(npm:*)",
      "Bash(if [ -f \"*.sqlite*\" ])",
      "Bash(then echo \"DB: SQLite (dev)\")",
      "Bash(pm2 list:*)",
      "Bash([ -f package.json ])",
      "Bash(NODE_ENV=production npx knex migrate:latest --knexfile packages/core/db/knexfile.js)",
      "Bash(pm2 restart:*)",
      "Bash(pm2 status:*)",
      "Bash(pm2 logs:*)",
      "Bash(psql:*)",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT username, full_name FROM users;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT id, role_name, can_manage_users FROM roles;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT id, username, full_name, is_active FROM users;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT id, role_name, permissions FROM roles WHERE role_name = ''admin'';\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT user_preferences, audit_trail FROM users WHERE username = ''admin'';\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT role_display_names, permissions, audit_trail FROM roles WHERE id = 1;\")",
      "Bash(pm2 startOrGracefulReload:*)",
      "Bash(pm2 stop:*)",
      "Bash(pm2 delete:*)",
      "Bash(pm2 start:*)",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"DELETE FROM users WHERE username = ''admin'' AND full_name = ''System Administrator'';\")",
      "Bash(./deploy-server.sh:*)",
      "Bash(pm2 reload:*)",
      "Bash(nginx:*)",
      "Bash(systemctl reload:*)",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT id, username, full_name, is_active FROM users WHERE username = ''admin'';\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT id, category_names FROM categories;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT id, display_names, associated_category_unique_identifier FROM items LIMIT 3;\")",
      "Bash(kill:*)",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT column_name FROM information_schema.columns WHERE table_name = ''users'';\")",
      "Bash(NODE_ENV=production node packages/core/scripts/reset_admin_pin.js)",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"CREATE EXTENSION IF NOT EXISTS vector;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"CREATE TABLE IF NOT EXISTS item_embeddings (item_id INTEGER PRIMARY KEY REFERENCES items(id) ON DELETE CASCADE, item_embedding TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT id, username, full_name FROM users WHERE is_active = true;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT id, role_name, permissions, length(permissions), left(permissions, 10) FROM roles WHERE id = 1;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT id, role_name, permissions::text FROM roles WHERE id = 1;\")",
      "Bash(PGPASSWORD=postgres psql:*)",
      "Bash(systemctl:*)",
      "Bash(service postgresql:*)",
      "Bash(sudo systemctl start:*)",
      "Bash(sudo service:*)",
      "Bash(/tmp/update_wsl_host.sh:*)",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckasse -c \"SELECT display_names FROM items LIMIT 1;\")",
      "Bash(git switch:*)",
      "Bash(git merge:*)",
      "Bash(git stash:*)",
      "Bash(git checkout:*)",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h 172.29.16.1 -p 5432 -U wms_user -d eckasse -c \"SELECT current_database(), current_user;\")",
      "Bash(NODE_ENV=production PG_USERNAME=wms_user PG_PASSWORD=gK76543n2PqX5bV9zR4m PG_DATABASE=eckwms PG_HOST=localhost PG_PORT=5432 npx knex migrate:latest --knexfile ./knexfile.js)",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT version();\")",
      "Bash(NODE_ENV=production DB_CLIENT=pg npx knex migrate:latest --knexfile packages/core/db/knexfile.js)",
      "Bash(echo:*)",
      "Bash(sudo nginx:*)",
      "Bash(sudo systemctl:*)",
      "Bash(./check-deployment.sh)",
      "Bash(dos2unix:*)",
      "Bash(git branch:*)",
      "Bash(./test-env-setup.sh:*)",
      "Bash(./env-check-test.sh)",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT event_type, payload FROM operational_logs WHERE payload::text LIKE ''%transaction_uuid\"\":\"\"08c95acb-09c0-41d2-90ba-9493537adb16%'' ORDER BY created_at;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"CREATE TABLE IF NOT EXISTS operational_logs (\n    id SERIAL PRIMARY KEY,\n    event_type VARCHAR(50) NOT NULL,\n    user_id INTEGER,\n    payload JSONB,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\")",
      "Bash(NODE_ENV=production DB_CLIENT=pg npx knex migrate:status --knexfile packages/core/db/knexfile.js)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(claude config list)",
      "Bash(claude update)",
      "Bash(claude migrate-installer:*)",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"ALTER TABLE active_transaction_items ADD COLUMN IF NOT EXISTS parent_transaction_item_id INTEGER REFERENCES active_transaction_items(id);\")",
      "Bash(NODE_ENV=production DB_CLIENT=pg npx knex raw \"ALTER TABLE active_transaction_items ADD COLUMN IF NOT EXISTS parent_transaction_item_id INTEGER REFERENCES active_transaction_items(id);\" --knexfile packages/core/db/knexfile.js)",
      "Bash(NODE_ENV=production DB_CLIENT=pg npx knex migrate:make add_parent_transaction_item_id --knexfile packages/core/db/knexfile.js)",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT column_name, data_type FROM information_schema.columns WHERE table_name = ''active_transaction_items'' ORDER BY ordinal_position;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"\\d active_transaction_items\")",
      "Bash(NODE_ENV=production DB_CLIENT=pg npx knex migrate:status --knexfile packages/core/db/knexfile.js)",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT id, transaction_uuid, event_type, timestamp_utc FROM operational_log WHERE transaction_uuid IN (SELECT uuid FROM active_transactions WHERE id = 31) ORDER BY timestamp_utc;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"\\d operational_log\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT uuid FROM active_transactions WHERE id = 31;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT COUNT(*) as category_count FROM categories;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT COUNT(*) as item_count FROM items;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT table_name FROM information_schema.tables WHERE table_schema=''public'' AND table_name IN (''categories'', ''items'', ''companies'', ''branches'');\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"\\d items\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT COUNT(*) as total FROM categories; SELECT COUNT(*) as total FROM items;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT COUNT(*) as category_count FROM categories;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT COUNT(*) as item_count FROM items;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT COUNT(*) FROM categories; SELECT COUNT(*) FROM items;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT table_name FROM information_schema.tables WHERE table_schema=''public'' AND table_name LIKE ''%layout%'';\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT id, name, is_active FROM menu_layouts ORDER BY created_at DESC LIMIT 5;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT id, name, layout_data FROM menu_layouts WHERE id = 7 LIMIT 1;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT id, name, SUBSTR(layout_data::text, 1, 200) as layout_preview FROM menu_layouts WHERE id = 8;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"\\d categories\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT id, category_names->>''de'' as name, category_type FROM categories ORDER BY id;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT COUNT(*) FROM categories; SELECT COUNT(*) FROM items;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT COUNT(*) FROM categories; SELECT COUNT(*) FROM items;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT COUNT(*) FROM categories; SELECT COUNT(*) FROM items;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT source_unique_identifier FROM categories LIMIT 5;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT COUNT(*) FROM categories; SELECT COUNT(*) FROM items; SELECT COUNT(*) FROM companies;\")",
      "Bash(env)",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT id, display_names->>''menu'' as name, additional_item_attributes FROM items WHERE additional_item_attributes IS NOT NULL LIMIT 5;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT COUNT(*) as total_items, COUNT(additional_item_attributes) as items_with_attributes FROM items;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT id, display_names->''menu''->>''de'' as name, additional_item_attributes FROM items LIMIT 5;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"\nUPDATE items \nSET additional_item_attributes = ''{\"\"ui_suggestions\"\": {\"\"background_color_hex\"\": \"\"#8FBC8F\"\"}}'' \nWHERE id = 17;\n\nUPDATE items \nSET additional_item_attributes = ''{\"\"ui_suggestions\"\": {\"\"background_color_hex\"\": \"\"#DEB887\"\"}}'' \nWHERE id = 18;\n\nUPDATE items \nSET additional_item_attributes = ''{\"\"ui_suggestions\"\": {\"\"background_color_hex\"\": \"\"#CD853F\"\"}}'' \nWHERE id = 19;\n\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT id, category_names FROM categories WHERE id = 56;\")",
      "Bash(pm2 show:*)",
      "Bash(pm2 save:*)",
      "Read(//root/.pm2/logs/**)",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT id, display_names->''button''->>''de'' as button_text FROM items WHERE display_names->''button''->>''de'' LIKE ''%\\n%'' LIMIT 5;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT id, display_names->''button''->>''de'' as button_text, position(chr(10) in display_names->''button''->>''de'') as newline_pos FROM items WHERE position(chr(10) in display_names->''button''->>''de'') > 0 LIMIT 5;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT username, full_name FROM users WHERE is_active = true LIMIT 3;\")",
      "Bash(NODE_ENV=development npx knex raw \"SELECT name FROM sqlite_master WHERE type=''table'' AND name LIKE ''dsfinvk_%'';\" --knexfile packages/core/db/knexfile.js)",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT version();\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT current_database(), current_user;\")",
      "Bash(NODE_ENV=development DB_CLIENT=pg npx knex migrate:status --knexfile packages/core/db/knexfile.js)",
      "Bash(NODE_ENV=development npx knex seed:run --specific=03_dsfinvk_vat_mapping.js --knexfile packages/core/db/knexfile.js)",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"\\d export_jobs\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT COUNT(*) FROM active_transactions WHERE status = ''finished'' AND created_at >= ''2025-08-24'';\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT job_id, parameters, status FROM export_jobs WHERE job_id = ''70e95678-05df-4c76-8324-fee528830ded'';\")",
      "Read(//tmp/**)",
      "Read(//tmp/**)",
      "Read(//tmp/**)",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT job_id, created_by, status FROM export_jobs WHERE job_id = ''70e95678-05df-4c76-8324-fee528830ded'';\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT job_id, created_by, status FROM export_jobs WHERE job_id = ''2f91a88e-86f3-4e27-8573-3f630403de28'';\")",
      "Read(//root/.pm2/logs/**)",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"\\d item_embeddings\")",
      "Bash(NODE_ENV=development npx knex raw \"PRAGMA table_info(vec_items);\" --knexfile packages/core/db/knexfile.js)",
      "Bash(NODE_ENV=development DB_CLIENT=sqlite npx knex raw \"PRAGMA table_info(vec_items);\" --knexfile packages/core/db/knexfile.js)",
      "Bash(NODE_ENV=development DB_CLIENT=pg npx knex migrate:latest --knexfile packages/core/db/knexfile.js)",
      "Bash(NODE_ENV=development DB_CLIENT=pg node -e \"\nconst db = require(''./packages/core/db/knex'');\n\nasync function createTable() {\n  try {\n    console.log(''Creating item_embeddings table...'');\n    await db.schema.createTable(''item_embeddings'', function (table) {\n      table.integer(''item_id'').primary().references(''id'').inTable(''items'').onDelete(''CASCADE'');\n      table.text(''item_embedding''); // Store as text for now\n      table.timestamps(true, true);\n    });\n    console.log(''✅ item_embeddings table created successfully'');\n  } catch (error) {\n    console.error(''Error:'', error.message);\n  } finally {\n    process.exit(0);\n  }\n}\n\ncreateTable();\n\")",
      "Bash(NODE_ENV=development DB_CLIENT=pg npx knex seed:run --knexfile packages/core/db/knexfile.js)",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT id, LEFT(embedding_vector::text, 50) as embedding_preview FROM items WHERE id = 24;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"\\d item_embeddings\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT item_id, item_embedding FROM item_embeddings WHERE item_id = 24 LIMIT 1;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT pg_get_tabledef(''item_embeddings'');\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT column_name, data_type, character_maximum_length FROM information_schema.columns WHERE table_name = ''item_embeddings'';\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT item_id, LEFT(item_embedding, 100) as preview FROM item_embeddings LIMIT 3;\")",
      "Read(//root/.pm2/logs/**)",
      "Read(//root/.pm2/logs/**)",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT COUNT(*) FROM active_transaction_items;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT DISTINCT item_id FROM active_transaction_items LIMIT 10;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT id, display_names->>''button''->>''de'' as button_text, additional_item_attributes->''ui_suggestions''->>''background_color_hex'' as color FROM items WHERE additional_item_attributes->''ui_suggestions''->>''background_color_hex'' IS NOT NULL LIMIT 5;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql -h localhost -p 5432 -U wms_user -d eckwms -c \"SELECT id, display_names->''button''->>''de'' as button_text, additional_item_attributes->''ui_suggestions''->>''background_color_hex'' as color FROM items WHERE additional_item_attributes->''ui_suggestions''->>''background_color_hex'' IS NOT NULL LIMIT 5;\")",
      "Bash(PGPASSWORD=gK76543n2PqX5bV9zR4m psql:*)",
      "Bash(git clean:*)",
      "Bash(git revert:*)",
      "Bash(NODE_ENV=development DB_CLIENT=pg node -e \"\nconst db = require(''./packages/core/db/knex'');\nasync function checkDb() {\n  try {\n    const categories = await db(''categories'').count(''* as count'');\n    const items = await db(''items'').count(''* as count'');\n    const companies = await db(''companies'').count(''* as count'');\n    console.log(''Categories:'', categories[0].count);\n    console.log(''Items:'', items[0].count);\n    console.log(''Companies:'', companies[0].count);\n    \n    // Check if item_embeddings table exists and has data\n    const tableExists = await db.schema.hasTable(''item_embeddings'');\n    console.log(''item_embeddings table exists:'', tableExists);\n    if (tableExists) {\n      const embeddings = await db(''item_embeddings'').count(''* as count'');\n      console.log(''Embeddings:'', embeddings[0].count);\n    }\n  } catch (error) {\n    console.error(''Error:'', error.message);\n  } finally {\n    process.exit(0);\n  }\n}\ncheckDb();\n\")",
      "Bash(NODE_ENV=development DB_CLIENT=pg node -e \"\nconst db = require(''./packages/core/db/knex'');\nasync function testConnection() {\n  try {\n    console.log(''Testing database connection...'');\n    const result = await db.raw(''SELECT version();'');\n    console.log(''✅ Database connected:'', result.rows[0].version);\n    \n    // Test basic table operations\n    console.log(''Testing basic operations...'');\n    \n    // Try to insert a test company\n    const testCompany = {\n      company_full_name: ''Test Company'',\n      meta_information: JSON.stringify({}),\n      global_configurations: JSON.stringify({})\n    };\n    \n    const [companyResult] = await db(''companies'').insert(testCompany).returning(''id'');\n    const companyId = typeof companyResult === ''object'' ? companyResult.id : companyResult;\n    console.log(''✅ Test company inserted with ID:'', companyId);\n    \n    // Clean up\n    await db(''companies'').where(''id'', companyId).del();\n    console.log(''✅ Test company cleaned up'');\n    \n  } catch (error) {\n    console.error(''❌ Database error:'', error.message);\n    console.error(''Stack:'', error.stack);\n  } finally {\n    process.exit(0);\n  }\n}\ntestConnection();\n\")",
      "Bash(NODE_ENV=development DB_CLIENT=pg node -e \"\nconst db = require(''./packages/core/db/knex'');\nasync function checkTable() {\n  try {\n    console.log(''Checking item_embeddings table structure...'');\n    const result = await db.raw(''SELECT column_name, data_type FROM information_schema.columns WHERE table_name = \\''item_embeddings\\'' ORDER BY ordinal_position;'');\n    console.log(''Table structure:'');\n    result.rows.forEach(row => {\n      console.log(row.column_name + '': '' + row.data_type);\n    });\n\n    // Check constraints\n    const constraints = await db.raw(''SELECT constraint_name, constraint_type FROM information_schema.table_constraints WHERE table_name = \\''item_embeddings\\'';'');\n    console.log(''\\nConstraints:'');\n    constraints.rows.forEach(row => {\n      console.log(row.constraint_name + '': '' + row.constraint_type);\n    });\n\n    // Test simple insert\n    console.log(''\\nTesting simple embedding insert...'');\n    await db(''item_embeddings'').insert({\n      item_id: 99999,\n      item_embedding: ''[0.1,0.2,0.3]''\n    });\n    console.log(''✅ Simple insert worked'');\n    \n    // Clean up\n    await db(''item_embeddings'').where(''item_id'', 99999).del();\n    console.log(''✅ Test data cleaned up'');\n    \n  } catch (error) {\n    console.error(''❌ Error:'', error.message);\n    console.error(''Error code:'', error.code);\n    console.error(''Error detail:'', error.detail);\n  } finally {\n    process.exit(0);\n  }\n}\ncheckTable();\n\")",
      "Bash(NODE_ENV=development DB_CLIENT=pg node -e \"\nconst db = require(''./packages/core/db/knex'');\nasync function clearCache() {\n  try {\n    console.log(''Clearing search cache...'');\n    await db(''search_cache'').del();\n    console.log(''Cache cleared successfully'');\n  } catch (error) {\n    console.error(''Error clearing cache:'', error.message);\n  } finally {\n    process.exit(0);\n  }\n}\nclearCache();\n\")",
      "Bash(NODE_ENV=development DB_CLIENT=pg node -e \"\nconst { searchProducts } = require(''./packages/core/application/search.service.js'');\nasync function testSearch() {\n  try {\n    console.log(''Testing search for \"\"coffee\"\"...'');\n    const results = await searchProducts(''coffee'', {});\n    console.log(''Search results:'', JSON.stringify(results, null, 2));\n  } catch (error) {\n    console.error(''Search error:'', error.message);\n    console.error(''Stack:'', error.stack);\n  } finally {\n    process.exit(0);\n  }\n}\ntestSearch();\n\")",
      "Bash(NODE_ENV=development DB_CLIENT=pg node -e \"\nconst db = require(''./packages/core/db/knex'');\nconst { searchProducts } = require(''./packages/core/application/search.service.js'');\n\nasync function testSearch() {\n  try {\n    console.log(''Clearing cache...'');\n    await db(''search_cache'').del();\n    \n    console.log(''Testing search for \"\"coffee\"\"...'');\n    const results = await searchProducts(''coffee'', {});\n    console.log(''Search results:'', JSON.stringify(results, null, 2));\n  } catch (error) {\n    console.error(''Search error:'', error.message);\n    console.error(''Stack:'', error.stack);\n  } finally {\n    process.exit(0);\n  }\n}\ntestSearch();\n\")",
      "Bash(NODE_ENV=development DB_CLIENT=pg node -e \"\nconst db = require(''./packages/core/db/knex'');\nconst { searchProducts } = require(''./packages/core/application/search.service.js'');\n\nasync function testSearch() {\n  try {\n    console.log(''Clearing cache...'');\n    await db(''search_cache'').del();\n    \n    console.log(''Testing search for \"\"coffee\"\"...'');\n    const results = await searchProducts(''coffee'', {});\n    console.log(''Search results:'', JSON.stringify(results, null, 2));\n  } catch (error) {\n    console.error(''Search error:'', error.message);\n    console.error(''Stack:'', error.stack);\n  } finally {\n    process.exit(0);\n  }\n}\ntestSearch();\n\")",
      "Bash(NODE_ENV=development DB_CLIENT=pg node -e \"\n// Test if we can access the ProductService through services\ntry {\n  const { services } = require(''./packages/core/index.js'');\n  console.log(''Services object available:'', Object.keys(services));\n  console.log(''Does services have product?'', ''product'' in services);\n  console.log(''Type of services.product:'', typeof services.product);\n  \n  if (services.product) {\n    console.log(''Methods on services.product:'', Object.getOwnPropertyNames(Object.getPrototypeOf(services.product)));\n  }\n} catch (error) {\n  console.error(''Error accessing services:'', error.message);\n}\n\")",
      "Bash(NODE_ENV=development DB_CLIENT=pg node -e \"\nconst db = require(''./packages/core/db/knex'');\n\nasync function clearCacheAndRestart() {\n  try {\n    console.log(''Clearing cache...'');\n    await db(''search_cache'').del();\n    console.log(''Cache cleared successfully'');\n    \n    console.log(''System ready for testing'');\n    console.log(''User should now be able to test: \"\"mach fünf\"\" for updating Iced Coffee price'');\n  } catch (error) {\n    console.error(''Error:'', error.message);\n  } finally {\n    process.exit(0);\n  }\n}\n\nclearCacheAndRestart();\n\")",
      "Bash(NODE_ENV=development DB_CLIENT=pg node:*)",
      "Bash(sudo -u postgres psql:*)",
      "Bash(NODE_ENV=development node -e \"\nconst { searchProducts } = require(''./packages/core/application/search.service.js'');\nasync function testSQLite() {\n  try {\n    console.log(''Testing search with SQLite as default...'');\n    const result = await searchProducts(''café creme'');\n    console.log(''Search successful! Result:'', {\n      success: result.success,\n      message: result.message,\n      resultsCount: result.results.length,\n      method: result.metadata.searchMethod\n    });\n  } catch (error) {\n    console.error(''Search failed:'', error.message);\n  }\n  process.exit(0);\n}\ntestSQLite();\n\")"
    ],
    "deny": [],
    "defaultMode": "acceptEdits"
  }
}