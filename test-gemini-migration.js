// –¢–µ—Å—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ Gemini API –Ω–∞ –Ω–æ–≤—ã–π SDK
require('dotenv').config();
const { GoogleGenAI } = require('@google/genai');

async function testGeminiMigration() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É—é –º–∏–≥—Ä–∞—Ü–∏—é Gemini API...');
  
  if (!process.env.GEMINI_API_KEY) {
    console.error('‚ùå GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    return;
  }
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ SDK
    const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const response = await ai.models.generateContent({
      model: 'gemini-2.0-flash-exp',
      contents: [
        { role: 'user', parts: [{ text: '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ –Ω–æ–≤—ã–π SDK. –û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ.' }] }
      ]
    });
    
    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
    console.log('üìÑ –û—Ç–≤–µ—Ç:', response.response?.text?.() || JSON.stringify(response, null, 2));
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    console.log('\nüîß –¢–µ—Å—Ç–∏—Ä—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫...');
    
    const errorHandler = require('./packages/backend/src/utils/geminiErrorHandler');
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É rate limit
    const mockError = {
      status: 429,
      message: 'RATE_LIMIT_EXCEEDED'
    };
    
    const errorInfo = errorHandler.handleGeminiError(mockError, { language: 'ru' });
    console.log('üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏:', errorInfo);
    
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

testGeminiMigration();