// Test file for Gemini API limit handling
require('dotenv').config({ path: '../../.env' });

const { handleGeminiError, createGeminiErrorLog, GEMINI_ERROR_TYPES } = require('./src/utils/geminiErrorHandler');
const { sendMessage } = require('./src/services/llm.service');

/**
 * –°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ Gemini API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function createMockGeminiError(type) {
  const errors = {
    [GEMINI_ERROR_TYPES.RATE_LIMIT]: new Error('Rate limit exceeded. Too many requests per minute.'),
    [GEMINI_ERROR_TYPES.QUOTA_EXCEEDED]: new Error('Quota exceeded for free tier usage.'),
    [GEMINI_ERROR_TYPES.INVALID_API_KEY]: new Error('Invalid API key provided.'),
    [GEMINI_ERROR_TYPES.NETWORK_ERROR]: new Error('Network connection failed: ECONNRESET'),
    [GEMINI_ERROR_TYPES.SERVICE_ERROR]: new Error('Internal server error: Service temporarily unavailable'),
    [GEMINI_ERROR_TYPES.CONTENT_FILTER]: new Error('Content blocked by safety filter policy')
  };

  const error = errors[type] || new Error('Unknown test error');
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
  switch (type) {
    case GEMINI_ERROR_TYPES.RATE_LIMIT:
      error.code = 429;
      break;
    case GEMINI_ERROR_TYPES.INVALID_API_KEY:
      error.code = 401;
      break;
    case GEMINI_ERROR_TYPES.SERVICE_ERROR:
      error.code = 503;
      break;
  }

  return error;
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
 */
function testErrorHandling() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö GEMINI API\n');

  Object.values(GEMINI_ERROR_TYPES).forEach(errorType => {
    console.log(`\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${errorType}`);
    console.log('=' .repeat(50));

    const mockError = createMockGeminiError(errorType);
    const errorInfo = handleGeminiError(mockError, { 
      language: 'ru', 
      includeRetryInfo: true 
    });

    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:');
    console.log(`   –¢–∏–ø –æ—à–∏–±–∫–∏: ${errorInfo.errorType}`);
    console.log(`   –í—Ä–µ–º–µ–Ω–Ω–∞—è: ${errorInfo.isTemporary}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${errorInfo.userMessage}`);
    
    if (errorInfo.retryMessage) {
      console.log(`   –ü–æ–≤—Ç–æ—Ä: ${errorInfo.retryMessage}`);
    }

    // –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    const logEntry = createGeminiErrorLog(mockError, {
      operation: 'test_operation',
      userId: 'test_user'
    });

    console.log(`\nüìù –õ–æ–≥ (${logEntry.level.toUpperCase()}):`);
    console.log(`   ${logEntry.msg}`);
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${logEntry.userMessage}`);
    
    if (logEntry.retryDelay > 0) {
      console.log(`   –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞: ${logEntry.retryDelay}—Å`);
    }
  });
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ LLM —Å–µ—Ä–≤–∏—Å–µ —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π –æ—à–∏–±–∫–∏
 */
async function testLLMServiceWithMockError() {
  console.log('\n\nüîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï LLM –°–ï–†–í–ò–°–ê –° –°–ò–ú–£–õ–Ø–¶–ò–ï–ô –û–®–ò–ë–ö–ò\n');

  // –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º API –∫–ª—é—á —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const originalApiKey = process.env.GEMINI_API_KEY;
  process.env.GEMINI_API_KEY = 'invalid_test_key_12345';

  try {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º API –∫–ª—é—á–æ–º...');
    const response = await sendMessage('–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?');
    
    console.log('üì• –û—Ç–≤–µ—Ç LLM —Å–µ—Ä–≤–∏—Å–∞:');
    console.log(`   –¢–µ–∫—Å—Ç: ${response.text}`);
    console.log(`   –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${response.isTemporary || 'false'}`);
    console.log(`   –¢–∏–ø –æ—à–∏–±–∫–∏: ${response.errorType || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
    
  } catch (error) {
    console.log('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
  } finally {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π API –∫–ª—é—á
    process.env.GEMINI_API_KEY = originalApiKey;
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É —Å –≤–∞–ª–∏–¥–Ω—ã–º API –∫–ª—é—á–æ–º
 */
async function testLLMServiceNormal() {
  console.log('\n\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–†–ú–ê–õ–¨–ù–û–ô –†–ê–ë–û–¢–´ LLM –°–ï–†–í–ò–°–ê\n');

  try {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
    const response = await sendMessage('–ù–∞–π–¥–∏ —Ç–æ–≤–∞—Ä –∫—Ä—É–∂–∫–∞');
    
    console.log('üì• –û—Ç–≤–µ—Ç LLM —Å–µ—Ä–≤–∏—Å–∞:');
    console.log(`   –¢–µ–∫—Å—Ç: ${response.text}`);
    console.log(`   –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${response.isTemporary || 'false'}`);
    console.log(`   –¢–∏–ø –æ—à–∏–±–∫–∏: ${response.errorType || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runTests() {
  try {
    // –¢–µ—Å—Ç 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
    testErrorHandling();
    
    // –¢–µ—Å—Ç 2: –°–∏–º—É–ª—è—Ü–∏—è –æ—à–∏–±–∫–∏ –≤ LLM —Å–µ—Ä–≤–∏—Å–µ
    await testLLMServiceWithMockError();
    
    // –¢–µ—Å—Ç 3: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π API –∫–ª—é—á)
    if (process.env.GEMINI_API_KEY && process.env.GEMINI_API_KEY !== 'your_api_key_here') {
      await testLLMServiceNormal();
    } else {
      console.log('\n‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã - –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ API –∫–ª—é—á–∞');
    }
    
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!');
    
  } catch (error) {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
if (require.main === module) {
  runTests().finally(() => {
    setTimeout(() => process.exit(0), 1000); // –î–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –ª–æ–≥–∞–º
  });
}

module.exports = {
  createMockGeminiError,
  testErrorHandling,
  runTests
};