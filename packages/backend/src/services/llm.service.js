// File: /packages/backend/src/services/llm.service.js

const { ChatGoogleGenerativeAI } = require("@langchain/google-genai");
const { AgentExecutor, createToolCallingAgent } = require("langchain/agents");
const { DynamicTool } = require("@langchain/core/tools");
const { ChatPromptTemplate, MessagesPlaceholder } = require("@langchain/core/prompts");
const { HumanMessage, AIMessage } = require("@langchain/core/messages");

const logger = require('../config/logger');
const knex = require('../db/knex');
const { handleGeminiError, createGeminiErrorLog } = require('../utils/geminiErrorHandler');
const { searchProducts } = require('./search.service');

const llm = new ChatGoogleGenerativeAI({
    apiKey: process.env.GEMINI_API_KEY,
    model: "gemini-1.5-flash",
    temperature: 0.1,
});

const tools = [
    new DynamicTool({
        name: "listAllProducts",
        description: "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç '—á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å?'.",
        func: async () => {
            logger.info({ tool: 'listAllProducts' }, 'ü§ñ –ê–≥–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ª–∏—Å—Ç–∏–Ω–≥–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤...');
            try {
                const products = await knex('items').select('*').limit(20);
                return products.length > 0 ? `–í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${JSON.stringify(products)}` : "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.";
            } catch (error) {
                logger.error({ msg: "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ listAllProducts", error });
                return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤.";
            }
        },
    }),
    new DynamicTool({
        name: "findProduct",
        description: "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö POS —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞: –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫, —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—á–∞—Ç–æ–∫.",
        func: async (toolInput) => {
            const productName = (typeof toolInput === 'object' && toolInput.input) ? toolInput.input : toolInput;
            logger.info({ tool: 'findProduct', input: productName }, 'ü§ñ –ê–≥–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞...');
            
            try {
                const searchResult = await searchProducts(productName);
                
                // Log search metadata for debugging
                logger.info({ 
                    searchMetadata: searchResult.metadata 
                }, `–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: ${searchResult.metadata?.searchMethod}`);
                
                if (searchResult.success) {
                    const product = searchResult.results[0];
                    const displayNames = JSON.parse(product.display_names);
                    
                    return `${searchResult.message}\n\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n- ID: ${product.id}\n- –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category_id}\n- –¶–µ–Ω–∞: ${product.price}‚Ç¨\n- –ú–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞: ${searchResult.metadata.searchMethod}\n- –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: ${searchResult.metadata.executionTime}ms`;
                } else {
                    // Include suggestions if available
                    let response = searchResult.message;
                    if (searchResult.results.length > 0) {
                        response += `\n\n–ü–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã:\n`;
                        searchResult.results.forEach((item, index) => {
                            response += `${index + 1}. ${item.productName} - ${item.price}‚Ç¨`;
                            if (item.similarity) {
                                response += ` (—Å—Ö–æ–∂–µ—Å—Ç—å: ${item.similarity}%)`;
                            }
                            response += `\n`;
                        });
                    }
                    return response;
                }
                
            } catch (error) {
                logger.error({ msg: "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ findProduct (–≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫)", error });
                return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å.";
            }
        },
    }),
    new DynamicTool({
        name: "createProduct",
        description: "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: name, price, categoryName.",
        func: async (input) => {
            logger.info({ tool: 'createProduct', input: input }, 'ü§ñ –ê–≥–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞...');
            try {
                const { name, price, categoryName } = (typeof input === 'string') ? JSON.parse(input) : input;
                if (!name || !price || !categoryName) return "–û—à–∏–±–∫–∞: –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã 'name', 'price' –∏ 'categoryName'.";
                const category = await knex('categories').whereRaw("json_extract(category_names, '$.de') = ?", [categoryName]).first();
                if (!category) return `–ö–∞—Ç–µ–≥–æ—Ä–∏—è '${categoryName}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.`;
                const posDeviceId = 1;
                const newItem = {
                    pos_device_id: posDeviceId,
                    associated_category_unique_identifier: category.id,
                    display_names: JSON.stringify({ menu: { de: name }, button: { de: name.slice(0, 12) }, receipt: { de: name } }),
                    item_price_value: parseFloat(price),
                    item_flags: JSON.stringify({ is_sellable: true, has_negative_price: false }),
                    audit_trail: JSON.stringify({ created_at: new Date().toISOString(), created_by: 'llm_agent', version: 1 }),
                };
                const [createdItem] = await knex('items').insert(newItem).returning('*');
                return `–¢–æ–≤–∞—Ä '${name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID ${createdItem.id} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '${categoryName}'.`;
            } catch (error) {
                logger.error({ msg: "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ createProduct", error, input });
                return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.";
            }
        },
    }),
    new DynamicTool({
        name: "createCategory",
        description: "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤. –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: name, type ('food' –∏–ª–∏ 'drink').",
        func: async (input) => {
            logger.info({ tool: 'createCategory', input: input }, 'ü§ñ –ê–≥–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
            try {
                const { name, type } = (typeof input === 'string') ? JSON.parse(input) : input;
                if (!name || !type) return "–û—à–∏–±–∫–∞: –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã 'name' –∏ 'type'.";
                const posDeviceId = 1;
                const newCategory = {
                    pos_device_id: posDeviceId,
                    category_names: JSON.stringify({ de: name }),
                    category_type: type,
                    audit_trail: JSON.stringify({ created_at: new Date().toISOString(), created_by: 'llm_agent', version: 1 }),
                };
                const [createdCategory] = await knex('categories').insert(newCategory).returning('*');
                return `–ö–∞—Ç–µ–≥–æ—Ä–∏—è '${name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å ID ${createdCategory.id}.`;
            } catch(error) {
                logger.error({ msg: "–û—à–∏–±–∫–∞ –≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ createCategory", error, input });
                return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.";
            }
        },
    }),
];

let agentExecutorPromise;

function getAgentExecutor() {
    if (!agentExecutorPromise) {
        agentExecutorPromise = (async () => {
            const SYSTEM_PROMPT = `–í—ã - AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–∞—Å—Å–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã ecKasse. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–ø—Ä–∞–≤–ª—è—Ç—å –µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º –∏–ª–∏ –º–∞–≥–∞–∑–∏–Ω–æ–º —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥. –ò—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á. –ï—Å–ª–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –≤–µ–∂–ª–∏–≤–æ –∑–∞–ø—Ä–æ—Å–∏ –µ—ë —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–∞–≤–∞–π —á–µ—Ç–∫–∏–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–¥–∞–Ω –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`;
            const prompt = ChatPromptTemplate.fromMessages([
                ["system", SYSTEM_PROMPT],
                new MessagesPlaceholder("chat_history"),
                ["human", "{input}"],
                new MessagesPlaceholder("agent_scratchpad"),
            ]);
            const agent = await createToolCallingAgent({ llm, tools, prompt });
            return new AgentExecutor({ agent, tools, verbose: process.env.NODE_ENV !== 'production' });
        })();
    }
    return agentExecutorPromise;
}

async function sendMessage(userMessage, chatHistory = []) {
    try {
        logger.info({ msg: '–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–º LangChain', message: userMessage });
        const executor = await getAgentExecutor();
        const history = chatHistory.map(msg => {
            const content = Array.isArray(msg.parts) ? msg.parts.map(p => p.text).join('') : msg.parts;
            return msg.role === 'user' ? new HumanMessage(content) : new AIMessage(content);
        });
        const result = await executor.invoke({ input: userMessage, chat_history: history });
        const newHistory = [
            ...chatHistory,
            { role: 'user', parts: [{ text: userMessage }] },
            { role: 'model', parts: [{ text: result.output }] },
        ];
        return { text: result.output, history: newHistory };
    } catch (error) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ Gemini API
        const geminiErrorInfo = handleGeminiError(error, { 
            language: 'ru', 
            includeRetryInfo: true 
        });
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥
        const errorLog = createGeminiErrorLog(error, {
            operation: 'llm_chat',
            userMessage: userMessage.substring(0, 100), // –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            chatHistoryLength: chatHistory.length
        });
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —É—Ä–æ–≤–Ω–µ–º
        if (errorLog.level === 'warn') {
            logger.warn(errorLog);
        } else {
            logger.error(errorLog);
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ
        let responseText = geminiErrorInfo.userMessage;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≤—Ç–æ—Ä–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
        if (geminiErrorInfo.isTemporary && geminiErrorInfo.retryMessage) {
            responseText += ' ' + geminiErrorInfo.retryMessage;
        }
        
        return {
            text: responseText,
            history: chatHistory,
            isTemporary: geminiErrorInfo.isTemporary,
            errorType: geminiErrorInfo.errorType
        };
    }
}

module.exports = { sendMessage };